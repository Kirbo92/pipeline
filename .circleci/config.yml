version: 2

jobs:
    checkout_code:
        docker:
            -
                image: circleci/golang:1.11
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            - checkout
            -
                persist_to_workspace:
                    root: /go/src/github.com/banzaicloud/pipeline
                    paths:
                        - .

    dependencies:
        docker:
            -
                image: circleci/golang:1.11
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                restore_cache:
                    name: Restore build dependencies
                    keys:
                        - gopkg-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

            -
                restore_cache:
                    name: Restore dependencies
                    keys:
                        - gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
                        - gopkg-v1-{{ .Branch }}
                        - gopkg-v1-master
                        - gopkg-v1

            -
                restore_cache:
                    name: Restore license cache
                    keys:
                        - licensei-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
                        - licensei-v1-{{ .Branch }}
                        - licensei-v1-master
                        - licensei-v1

            -
                run:
                    name: Install dependencies
                    command: make vendor

            -
                run:
                    name: Download license information for dependencies
                    command: make license-cache

            -
                save_cache:
                    name: Save dependencies
                    key: gopkg-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
                    paths:
                        - vendor/

            -
                save_cache:
                    name: Save license cache
                    key: licensei-v1-{{ .Branch }}-{{ checksum "Gopkg.lock" }}
                    paths:
                        - .licensei.cache

            -
                save_cache:
                    name: Save build dependencies
                    key: gopkg-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
                    paths:
                        - bin/

            -
                persist_to_workspace:
                    root: /go/src/github.com/banzaicloud/pipeline
                    paths:
                        - .licensei.cache
                        - vendor/

    checks:
        docker:
            -
                image: circleci/golang:1.11
            -
                image: mysql:5.7
                command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
                environment:
                    MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                restore_cache:
                    name: Restore build dependencies
                    keys:
                        - checks-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}

            -
                run:
                    name: Install build dependencies
                    command: sudo apt-get install -y mysql-client mysql-utilities

            -
                run:
                    name: Check dependency licenses
                    command: make license-check

            -
                run:
                    name: Check generated OpenAPI files
                    command: sha256sum -c client/SHA256SUMS > /dev/null || { echo "Please generate client code using make generate-client"; exit 1; }

            -
                run:
                    name: Run linter
                    command: make lint

            -
                run:
                    name: Create databases
                    command: |
                        mysql -h 127.0.0.1 -u root -e "CREATE DATABASE pipeline_migrations;"
                        mysql -h 127.0.0.1 -u root -e 'CREATE DATABASE pipeline_automigrate; USE pipeline_automigrate; CREATE TABLE `schema_migrations` (`version` bigint(20) NOT NULL, `dirty` tinyint(1) NOT NULL, PRIMARY KEY (`version`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;'

            -
                run:
                    name: Test database migrations
                    command: |
                        make bin/migrate config/config.toml
                        bin/migrate -source "file://database/migrations" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test database auto migrations
                    command: go run -tags automigrate ./cmd/pipeline/automigrate.go ./cmd/pipeline/migrate.go
                    environment:
                        PIPELINE_DATABASE_HOST: 127.0.0.1
                        PIPELINE_DATABASE_USER: root
                        PIPELINE_DATABASE_PASSWORD: ""
                        PIPELINE_DATABASE_ROLE: ""
                        PIPELINE_DATABASE_DBNAME: pipeline_automigrate
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                run:
                    name: Test database schema diff
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                run:
                    name: Test database migrations are reversible
                    command: |
                        bin/migrate -source "file://database/migrations" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" down
                        bin/migrate -source "file://database/migrations" -database "mysql://root:@tcp(127.0.0.1:3306)/pipeline_migrations?multiStatements=true&charset=utf8mb4" up

            -
                run:
                    name: Test database schema diff again
                    command: mysqldiff --skip-table-options --server1=root:@127.0.0.1:3306 --server2=root:@127.0.0.1:3306 pipeline_migrations:pipeline_automigrate

            -
                save_cache:
                    name: Save build dependencies
                    key: checks-deps-v1-{{ .Branch }}-{{ checksum "Makefile" }}
                    paths:
                        - bin/

    build:pipeline:
        docker:
            -
                image: circleci/golang:1.11
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                run:
                    name: Build
                    command: make build-pipeline

            -
                store_artifacts:
                    path: build/

    build:worker:
        docker:
            -
                image: circleci/golang:1.11
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                run:
                    name: Build
                    command: make build-worker

            -
                store_artifacts:
                    path: build/

    tests:
        docker:
            -
                image: circleci/golang:1.11
            -
                image: vault:0.11.0
                environment:
                    SKIP_SETCAP: true
                    VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf
        working_directory: /go/src/github.com/banzaicloud/pipeline
        parallelism: 3
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                run:
                    name: Run tests
                    command: |
                        make config/config.toml
                        PIPELINE_CONFIG_DIR=$PWD/config GOARGS="-p=2" TEST_PKGS=$(echo `go list ./... | circleci tests split`) TEST_REPORT_NAME=results_${CIRCLE_NODE_INDEX}.xml make test
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                store_test_results:
                    path: build/test_results/main/

    integration_tests:
        docker:
            -
                image: circleci/golang:1.11
            -
                image: vault:0.11.5
                environment:
                    SKIP_SETCAP: true
                    VAULT_DEV_ROOT_TOKEN_ID: 227e1cce-6bf7-30bb-2d2a-acc854318caf
        working_directory: /go/src/github.com/banzaicloud/pipeline
        steps:
            -
                attach_workspace:
                    at: /go/src/github.com/banzaicloud/pipeline

            -
                run:
                    name: Run integration tests
                    command: |
                        make config/config.toml
                        PIPELINE_CONFIG_DIR=$PWD/config GOARGS="-p=2" TEST_PKGS=$(echo `go list ./... | circleci tests split`) TEST_REPORT_NAME=results_${CIRCLE_NODE_INDEX}.xml make test-integration
                    environment:
                        VAULT_ADDR: http://localhost:8200
                        VAULT_TOKEN: 227e1cce-6bf7-30bb-2d2a-acc854318caf

            -
                store_test_results:
                    path: build/test_results/integration/

workflows:
    version: 2
    build:
        jobs:
            - checkout_code
            -
                dependencies:
                    requires:
                        - checkout_code
            -
                checks:
                    requires:
                        - dependencies
            -
                build:pipeline:
                    requires:
                        - dependencies
            -
                build:worker:
                    requires:
                        - dependencies
            -
                tests:
                    requires:
                        - dependencies
            -
                integration_tests:
                    requires:
                        - dependencies
